<?php
// Malware Scanner module for SecureSphere
class SecureSphere_MalwareScanner {
    private static $scan_results = [];
    private static $yara_rules = []; // Keep YARA rules as a base, can be extended via UI later if needed

    // Option keys
    const OPT_SCAN_UPLOADS_ENABLED = 'securesphere_malware_scan_uploads_enabled';
    const OPT_SCHEDULE_ENABLED = 'securesphere_malware_schedule_enabled';
    const OPT_SCHEDULE_FREQUENCY = 'securesphere_malware_schedule_frequency';
    const OPT_CUSTOM_REGEX_PATTERNS = 'securesphere_malware_custom_regex';
    const OPT_KNOWN_MALWARE_HASHES = 'securesphere_malware_known_hashes'; // For placeholder
    const OPT_LAST_SCAN = 'securesphere_last_scan';

    public static function init() {
        self::load_settings_and_hooks();
        // Load YARA rules (can be made dynamic later)
        self::load_yara_rules();
    }
    
    private static function load_settings_and_hooks() {
        // Settings
        $scan_uploads_enabled = get_option(self::OPT_SCAN_UPLOADS_ENABLED, true);
        $schedule_enabled = get_option(self::OPT_SCHEDULE_ENABLED, true);

        if ($schedule_enabled) {
            add_action('admin_init', [__CLASS__, 'schedule_scan_job']); // Renamed for clarity
            add_action('securesphere_scheduled_scan_hook', [__CLASS__, 'perform_full_scan']); // Renamed for clarity
        } else {
            // Unschedule if disabled
            if (wp_next_scheduled('securesphere_scheduled_scan_hook')) {
                wp_clear_scheduled_hook('securesphere_scheduled_scan_hook');
            }
        }
        
        if ($scan_uploads_enabled) {
            add_filter('wp_handle_upload', [__CLASS__, 'scan_uploaded_file_filter'], 10, 2); // Renamed for clarity
        }
        
        // Admin menu
        add_action('admin_menu', [__CLASS__, 'add_malware_scan_menu']); // Renamed for clarity
        
        // Manual scan handler
        add_action('admin_post_securesphere_run_manual_scan', [__CLASS__, 'handle_manual_scan_trigger']); // Renamed
    }

    public static function schedule_scan_job() {
        if (!wp_next_scheduled('securesphere_scheduled_scan_hook')) {
            $frequency = get_option(self::OPT_SCHEDULE_FREQUENCY, 'daily');
            wp_schedule_event(time(), $frequency, 'securesphere_scheduled_scan_hook');
        }
    }

    public static function perform_full_scan() { // Renamed from perform_scan
        self::$scan_results = [];
        $wp_root = ABSPATH;
        
        // Scan core WordPress files
        self::scan_directory($wp_root . 'wp-admin');
        self::scan_directory($wp_root . 'wp-includes');
        
        // Scan themes
        $themes_dir = get_theme_root();
        self::scan_directory($themes_dir);
        
        // Scan plugins
        $plugins_dir = WP_PLUGIN_DIR;
        self::scan_directory($plugins_dir);
        
        // Scan uploads
        $uploads_dir = wp_upload_dir()['basedir'];
        self::scan_directory($uploads_dir);
        
        // Save scan results
        update_option(self::OPT_LAST_SCAN, [
            'time' => current_time('mysql'),
            'results' => self::$scan_results,
            'type' => 'scheduled'
        ]);
        
        // Send alert if malware found
        if (!empty(self::$scan_results)) { // Changed from has_malware() for direct check
            do_action('securesphere_malware_detected', self::$scan_results);
        }
    }
    
    public static function handle_manual_scan_trigger() {
        if (!current_user_can('manage_options')) {
            wp_die('Permission denied.');
        }
        check_admin_referer('securesphere_run_manual_scan_nonce', 'securesphere_manual_scan_nonce');

        self::perform_full_scan(); // Re-use the full scan logic
        
        // Update last scan type for manual
         $last_scan_data = get_option(self::OPT_LAST_SCAN, []);
         $last_scan_data['type'] = 'manual';
         $last_scan_data['time'] = current_time('mysql'); // Update time for manual scan
         update_option(self::OPT_LAST_SCAN, $last_scan_data);

        wp_redirect(admin_url('admin.php?page=securesphere-malware-scan&scan_status=completed'));
        exit;
    }


    public static function scan_directory($dir) {
        if (!is_dir($dir)) {
            return;
        }

        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($dir, RecursiveDirectoryIterator::SKIP_DOTS)
        );

        foreach ($files as $file) {
            if ($file->isFile()) {
                self::scan_file($file->getPathname());
            }
        }
    }

    public static function scan_file($file_path) {
        // Skip non-PHP files unless they're in uploads
        if (!preg_match('/\.(php|phtml|php3|php4|php5|php7|phps|inc)$/i', $file_path) 
            && strpos($file_path, wp_upload_dir()['basedir']) === false) {
            return;
        }

        $file_hash = md5_file($file_path);
        $relative_path = str_replace(ABSPATH, '', $file_path);
        
        // Check file hash against known malware hashes
        $known_hashes = get_option(self::OPT_KNOWN_MALWARE_HASHES, []);
        if (in_array($file_hash, $known_hashes)) {
            self::$scan_results[] = [
                'file' => $relative_path,
                'type' => 'hash_match',
                'severity' => 'critical',
                'details' => 'File hash matches known malware signature.'
            ];
            return; // Stop further scanning if known bad hash
        }

        $content = file_get_contents($file_path);
        if ($content === false) return; // Cannot read file

        // Scan file content with YARA rules
        foreach (self::$yara_rules as $rule_name => $rule) {
            if (self::match_yara_rule($content, $rule)) {
                self::$scan_results[] = [
                    'file' => $relative_path,
                    'type' => 'yara_match',
                    'severity' => 'high',
                    'details' => "Matched YARA rule: " . esc_html($rule['description']) . " ($rule_name)"
                ];
                // Don't return here, a file might match multiple rules/patterns
            }
        }

        // Check for hardcoded suspicious patterns (base set)
        if (self::has_hardcoded_suspicious_patterns($content)) { // Renamed
            self::$scan_results[] = [
                'file' => $relative_path,
                'type' => 'suspicious_pattern_hardcoded',
                'severity' => 'medium',
                'details' => 'Contains built-in suspicious patterns.'
            ];
        }
        
        // Check for custom regex patterns
        $custom_patterns = get_option(self::OPT_CUSTOM_REGEX_PATTERNS, []);
        if (!empty($custom_patterns) && is_array($custom_patterns)) {
            foreach($custom_patterns as $idx => $custom_pattern) {
                if (!empty(trim($custom_pattern))) {
                    // Basic validation if it's a valid regex
                    if (@preg_match(trim($custom_pattern), '') !== false) {
                         if (preg_match(trim($custom_pattern), $content)) {
                            self::$scan_results[] = [
                                'file' => $relative_path,
                                'type' => 'suspicious_pattern_custom',
                                'severity' => 'medium', // Or allow severity per custom pattern
                                'details' => 'Matched custom regex pattern #' . ($idx + 1) . ': ' . esc_html(trim($custom_pattern))
                            ];
                        }
                    }
                }
            }
        }
    }

    public static function scan_uploaded_file_filter($file_array, $context) { // Renamed
        // Reset scan results for this specific file scan
        $initial_scan_results_count = count(self::$scan_results);
        
        self::scan_file($file_array['file']);
        
        // Check if new results were added for this file
        $new_findings = array_slice(self::$scan_results, $initial_scan_results_count);

        if (!empty($new_findings)) {
            // Log the specific finding for the uploaded file
            // For simplicity, we'll use the first new finding as the reason
            $reason = $new_findings[0]['details'] ?? 'Malware detected in upload';
            
            // Remove the uploaded file
            @unlink($file_array['file']);
            
            // Add to main scan log if needed, or a separate upload log
            // For now, the findings are in self::$scan_results which might be confusing if a full scan runs concurrently
            // It's better to handle upload scan results separately or ensure perform_full_scan resets it.
            // For now, we just error out.
            
            // Return error
            $file_array['error'] = 'File upload blocked: Malware detected (' . esc_html($reason) . ')';
            
            // To ensure the main scan_results isn't polluted by just upload scans if a full scan is running,
            // we might want to pop these new findings if they are only for the upload.
            // For now, this is okay as perform_full_scan resets self::$scan_results.
        }
        
        return $file_array;
    }

    private static function load_yara_rules() {
        // Basic YARA rules for common malware patterns
        self::$yara_rules = [
            'eval_base64' => [
                'pattern' => '/eval\s*\(\s*base64_decode\s*\(/i',
                'description' => 'Base64 encoded PHP code'
            ],
            'shell_exec' => [
                'pattern' => '/shell_exec\s*\(\s*[\'"]\s*[a-z0-9_\-]+\s*[\'"]\s*\)/i',
                'description' => 'Shell command execution'
            ],
            'system_call' => [
                'pattern' => '/system\s*\(\s*\$_(GET|POST|REQUEST|COOKIE)/i',
                'description' => 'System command from user input'
            ],
            'file_upload' => [
                'pattern' => '/move_uploaded_file\s*\(\s*\$_(FILES|POST)/i',
                'description' => 'File upload handling'
            ],
            'obfuscated_js' => [
                'pattern' => '/document\.write\s*\(\s*unescape\s*\(/i',
                'description' => 'Obfuscated JavaScript'
            ]
        ];
    }

    private static function match_yara_rule($content, $rule) {
        return preg_match($rule['pattern'], $content) === 1;
    }

    private static function has_hardcoded_suspicious_patterns($content) { // Renamed
        $patterns = [ // These are basic examples
            '/eval\s*\(\s*base64_decode\s*\(/i',
            '/shell_exec\s*\(/i',
            '/passthru\s*\(/i',
            '/system\s*\(/i',
            '/proc_open\s*\(/i',
            '/popen\s*\(/i',
            '/<\?php\s+filesize\s*\(\s*__FILE__\s*\)\s*==\s*0\s*\?\s*include\s*\(\s*\$_(GET|POST|REQUEST|COOKIE)/i', // Common backdoor pattern
            '/\$GLOBALS\[\$GLOBALS\[\'[a-zA-Z0-9_]*\'\]\]/i', // Superglobals manipulation
        ];

        foreach ($patterns as $pattern) {
            if (preg_match($pattern, $content)) {
                return true;
            }
        }
        return false;
    }

    // is_known_malware_hash is now implicitly handled in scan_file by checking OPT_KNOWN_MALWARE_HASHES

    public static function add_malware_scan_menu() { // Renamed
        add_submenu_page(
            'securesphere-mssp',
            'Malware Scanner', // Page Title
            'Malware Scan',    // Menu Title
            'manage_options',
            'securesphere-malware-scan', // Slug
            [__CLASS__, 'render_malware_scan_page'] // Renamed
        );
    }

    public static function render_malware_scan_page() { // Renamed
        if (!current_user_can('manage_options')) {
            wp_die('Permission Denied.');
        }

        // Handle settings update
        if (isset($_POST['securesphere_malware_settings_nonce']) && wp_verify_nonce($_POST['securesphere_malware_settings_nonce'], 'securesphere_malware_settings_action')) {
            update_option(self::OPT_SCAN_UPLOADS_ENABLED, isset($_POST[self::OPT_SCAN_UPLOADS_ENABLED]));
            update_option(self::OPT_SCHEDULE_ENABLED, isset($_POST[self::OPT_SCHEDULE_ENABLED]));
            if (isset($_POST[self::OPT_SCHEDULE_FREQUENCY])) {
                $new_freq = sanitize_text_field($_POST[self::OPT_SCHEDULE_FREQUENCY]);
                $current_freq = get_option(self::OPT_SCHEDULE_FREQUENCY, 'daily');
                if ($new_freq !== $current_freq || (isset($_POST[self::OPT_SCHEDULE_ENABLED]) && !wp_next_scheduled('securesphere_scheduled_scan_hook'))) {
                    wp_clear_scheduled_hook('securesphere_scheduled_scan_hook'); // Clear existing before rescheduling
                    update_option(self::OPT_SCHEDULE_FREQUENCY, $new_freq);
                    if (isset($_POST[self::OPT_SCHEDULE_ENABLED])) { // Only schedule if master schedule is enabled
                         self::schedule_scan_job(); // Reschedule with new frequency
                    }
                } elseif (!isset($_POST[self::OPT_SCHEDULE_ENABLED])) { // If schedule disabled, clear it
                     wp_clear_scheduled_hook('securesphere_scheduled_scan_hook');
                }
            }
            
            if (isset($_POST[self::OPT_CUSTOM_REGEX_PATTERNS])) {
                $custom_patterns = array_map('sanitize_textarea_field', explode("\n", $_POST[self::OPT_CUSTOM_REGEX_PATTERNS]));
                $custom_patterns = array_map('trim', $custom_patterns);
                $custom_patterns = array_filter($custom_patterns); // Remove empty lines
                update_option(self::OPT_CUSTOM_REGEX_PATTERNS, $custom_patterns);
            }
             if (isset($_POST[self::OPT_KNOWN_MALWARE_HASHES])) { // Placeholder
                $known_hashes = array_map('sanitize_text_field', explode("\n", $_POST[self::OPT_KNOWN_MALWARE_HASHES]));
                $known_hashes = array_map('trim', $known_hashes);
                $known_hashes = array_filter($known_hashes);
                update_option(self::OPT_KNOWN_MALWARE_HASHES, $known_hashes);
            }

            echo '<div class="notice notice-success is-dismissible"><p>Settings saved.</p></div>';
            self::load_settings_and_hooks(); // Reload hooks if settings changed
        }

        $scan_uploads_enabled = get_option(self::OPT_SCAN_UPLOADS_ENABLED, true);
        $schedule_enabled = get_option(self::OPT_SCHEDULE_ENABLED, true);
        $schedule_frequency = get_option(self::OPT_SCHEDULE_FREQUENCY, 'daily');
        $custom_regex_patterns = get_option(self::OPT_CUSTOM_REGEX_PATTERNS, []);
        $known_malware_hashes = get_option(self::OPT_KNOWN_MALWARE_HASHES, []); // Placeholder

        $last_scan = get_option(self::OPT_LAST_SCAN, []);
        ?>
        <div class="wrap">
            <h1>Malware Scanner Settings & Results</h1>

            <form method="post" action="">
                <?php wp_nonce_field('securesphere_malware_settings_action', 'securesphere_malware_settings_nonce'); ?>
                <h2>Scan Settings</h2>
                <table class="form-table">
                    <tr valign="top">
                        <th scope="row">Scan Uploaded Files</th>
                        <td><input type="checkbox" name="<?php echo self::OPT_SCAN_UPLOADS_ENABLED; ?>" value="1" <?php checked($scan_uploads_enabled); ?> /> Enable real-time scanning of uploaded files.</td>
                    </tr>
                    <tr valign="top">
                        <th scope="row">Enable Scheduled Scans</th>
                        <td><input type="checkbox" name="<?php echo self::OPT_SCHEDULE_ENABLED; ?>" value="1" <?php checked($schedule_enabled); ?> /> Enable automatic periodic scans of your site.</td>
                    </tr>
                    <tr valign="top">
                        <th scope="row"><label for="<?php echo self::OPT_SCHEDULE_FREQUENCY; ?>">Scan Frequency</label></th>
                        <td>
                            <select name="<?php echo self::OPT_SCHEDULE_FREQUENCY; ?>" id="<?php echo self::OPT_SCHEDULE_FREQUENCY; ?>">
                                <?php
                                $schedules = wp_get_schedules();
                                foreach ($schedules as $key => $details) {
                                    echo '<option value="' . esc_attr($key) . '" ' . selected($schedule_frequency, $key, false) . '>' . esc_html($details['display']) . '</option>';
                                }
                                ?>
                            </select>
                            <p class="description">How often should scheduled scans run?</p>
                        </td>
                    </tr>
                    <tr valign="top">
                        <th scope="row"><label for="<?php echo self::OPT_CUSTOM_REGEX_PATTERNS; ?>">Custom Regex Patterns</label></th>
                        <td>
                            <textarea name="<?php echo self::OPT_CUSTOM_REGEX_PATTERNS; ?>" id="<?php echo self::OPT_CUSTOM_REGEX_PATTERNS; ?>" rows="5" cols="50" class="large-text code"><?php echo esc_textarea(implode("\n", $custom_regex_patterns)); ?></textarea>
                            <p class="description">Enter custom regular expression patterns to search for, one per line. Use with caution, invalid regex can cause errors.</p>
                        </td>
                    </tr>
                     <tr valign="top">
                        <th scope="row"><label for="<?php echo self::OPT_KNOWN_MALWARE_HASHES; ?>">Known Malware Hashes (MD5)</label></th>
                        <td>
                            <textarea name="<?php echo self::OPT_KNOWN_MALWARE_HASHES; ?>" id="<?php echo self::OPT_KNOWN_MALWARE_HASHES; ?>" rows="5" cols="50" class="large-text code"><?php echo esc_textarea(implode("\n", $known_malware_hashes)); ?></textarea>
                            <p class="description">Enter known MD5 hashes of malware files, one per line. (This is a placeholder for a proper hash database).</p>
                        </td>
                    </tr>
                </table>
                <?php submit_button('Save Settings'); ?>
            </form>
            <hr/>
            <h2>Scan Results</h2>
             <?php if (isset($_GET['scan_status']) && $_GET['scan_status'] === 'completed'): ?>
                <div class="notice notice-success is-dismissible"><p>Manual scan completed.</p></div>
            <?php endif; ?>

            <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>">
                <input type="hidden" name="action" value="securesphere_run_manual_scan">
                <?php wp_nonce_field('securesphere_run_manual_scan_nonce', 'securesphere_manual_scan_nonce'); ?>
                <?php submit_button('Run Full Scan Now', 'primary', 'run_manual_scan_button'); ?>
            </form>

            <?php if (empty($last_scan)): ?>
                <p>No scan has been performed yet.</p>
            <?php else: ?>
                <p>Last scan: <?php echo esc_html($last_scan['time']); ?> (Type: <?php echo esc_html(ucfirst($last_scan['type'] ?? 'N/A')); ?>)</p>
                
                <?php if (empty($last_scan['results'])): ?>
                    <div class="notice notice-success is-dismissible"><p>No malware detected in the last scan.</p></div>
                <?php else: ?>
                    <table class="wp-list-table widefat fixed striped">
                        <thead>
                            <tr>
                                <th>File</th>
                                <th>Type</th>
                                <th>Severity</th>
                                <th>Details</th>
                            </tr>
                        </thead>
                        <tbody>
                            <?php foreach ($last_scan['results'] as $result): ?>
                                <tr>
                                    <td><?php echo esc_html($result['file']); ?></td>
                                    <td><?php echo esc_html($result['type']); ?></td>
                                    <td>
                                        <span class="severity-<?php echo esc_attr($result['severity']); ?>">
                                            <?php echo esc_html(ucfirst($result['severity'])); ?>
                                        </span>
                                    </td>
                                    <td><?php echo esc_html($result['details']); ?></td>
                                </tr>
                            <?php endforeach; ?>
                        </tbody>
                    </table>
                <?php endif; ?>
            <?php endif; ?>
        </div>
        <?php
    }
}