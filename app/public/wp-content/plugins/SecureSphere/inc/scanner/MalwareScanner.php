<?php
if (!defined('ABSPATH')) {
    exit;
}

/**
 * SecureSphere Malware Scanner Module
 * Handles advanced malware scanning features
 */

class SecureSphere_MalwareScanner {
    private static $instance = null;
    private $config;
    private $logger;
    private $db;
    
    public static function init() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    private function __construct() {
        $this->config = SecureSphere_Config::init();
        $this->logger = SecureSphere_Logger::init();
        $this->db = SecureSphere_Database::init();
        
        // Initialize scanner hooks
        add_action('securesphere_scheduled_scan', array($this, 'run_scheduled_scan'));
        add_action('admin_post_securesphere_run_scan', array($this, 'handle_manual_scan'));
        add_action('upload_mimes', array($this, 'restrict_upload_types'));
        add_action('wp_handle_upload', array($this, 'scan_uploaded_file'));
        add_action('admin_init', array($this, 'init_settings'));
    }
    
    public function init_settings() {
        register_setting('securesphere_malware_settings', 'securesphere_malware_enabled');
        register_setting('securesphere_malware_settings', 'securesphere_malware_schedule');
    }
    
    public function render_admin_page() {
        if (!current_user_can('manage_options')) {
            wp_die(__('You do not have sufficient permissions to access this page.'));
        }
        ?>
        <div class="wrap">
            <h1><span class="dashicons dashicons-search"></span> Malware Scanner</h1>
            
            <div class="securesphere-settings-box">
                <h2>Scanner Settings</h2>
                <form method="post" action="options.php">
                    <?php
                    settings_fields('securesphere_malware_settings');
                    do_settings_sections('securesphere_malware_settings');
                    ?>
                    
                    <table class="form-table">
                        <tr>
                            <th scope="row">Enable Scanner</th>
                            <td>
                                <label class="securesphere-switch">
                                    <input type="checkbox" name="securesphere_malware_enabled" value="1" <?php checked(get_option('securesphere_malware_enabled', true)); ?>>
                                    <span class="slider round"></span>
                                </label>
                                <p class="description">Enable malware scanning functionality</p>
                            </td>
                        </tr>
                        <tr>
                            <th scope="row">Scan Schedule</th>
                            <td>
                                <select name="securesphere_malware_schedule">
                                    <option value="daily" <?php selected(get_option('securesphere_malware_schedule', 'daily'), 'daily'); ?>>Daily</option>
                                    <option value="weekly" <?php selected(get_option('securesphere_malware_schedule', 'daily'), 'weekly'); ?>>Weekly</option>
                                    <option value="monthly" <?php selected(get_option('securesphere_malware_schedule', 'daily'), 'monthly'); ?>>Monthly</option>
                                </select>
                                <p class="description">How often to run automatic scans</p>
                            </td>
                        </tr>
                    </table>
                    
                    <?php submit_button('Save Settings'); ?>
                </form>
            </div>
            
            <div class="securesphere-settings-box">
                <h2>Manual Scan</h2>
                <p>Run a manual scan of your WordPress installation to check for malware and suspicious files.</p>
                <button type="button" class="button button-primary" id="start-scan">Start Scan</button>
                <div id="scan-progress" style="display: none; margin-top: 20px;">
                    <div class="progress-bar">
                        <div class="progress-bar-fill"></div>
                    </div>
                    <p class="scan-status">Scanning files...</p>
                </div>
            </div>
            
            <div class="securesphere-settings-box">
                <h2>Scan Results</h2>
                <div class="securesphere-stats-grid">
                    <div class="stat-box">
                        <h3>Files Scanned</h3>
                        <p class="stat-number">0</p>
                    </div>
                    <div class="stat-box">
                        <h3>Threats Found</h3>
                        <p class="stat-number">0</p>
                    </div>
                    <div class="stat-box">
                        <h3>Last Scan</h3>
                        <p class="stat-number">Never</p>
                    </div>
                </div>
            </div>
        </div>
        
        <style>
        .securesphere-settings-box {
            background: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin: 20px 0;
        }
        
        .securesphere-settings-box h2 {
            margin-top: 0;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .securesphere-stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .stat-box {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 6px;
            text-align: center;
        }
        
        .stat-box h3 {
            margin: 0 0 10px 0;
            color: #1d2327;
        }
        
        .stat-number {
            font-size: 24px;
            font-weight: bold;
            color: #2271b1;
            margin: 0;
        }
        
        .progress-bar {
            width: 100%;
            height: 20px;
            background-color: #f0f0f1;
            border-radius: 10px;
            overflow: hidden;
        }
        
        .progress-bar-fill {
            height: 100%;
            background-color: #2271b1;
            width: 0%;
            transition: width 0.3s ease-in-out;
        }
        
        .scan-status {
            margin-top: 10px;
            color: #666;
        }
        
        /* Toggle Switch */
        .securesphere-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
            margin-right: 10px;
        }
        
        .securesphere-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
        }
        
        input:checked + .slider {
            background-color: #2271b1;
        }
        
        input:focus + .slider {
            box-shadow: 0 0 1px #2271b1;
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .slider.round {
            border-radius: 24px;
        }
        
        .slider.round:before {
            border-radius: 50%;
        }
        </style>
        
        <script>
        jQuery(document).ready(function($) {
            $('#start-scan').click(function() {
                $('#scan-progress').show();
                $('.progress-bar-fill').css('width', '0%');
                $('.scan-status').text('Scanning files...');
                
                // Simulate scan progress
                let progress = 0;
                const interval = setInterval(function() {
                    progress += 5;
                    $('.progress-bar-fill').css('width', progress + '%');
                    
                    if (progress >= 100) {
                        clearInterval(interval);
                        $('.scan-status').text('Scan completed!');
                    }
                }, 500);
            });
        });
        </script>
        <?php
    }
    
    public function run_scheduled_scan() {
        if (!$this->config->get_option('malware_scanning_enabled')) {
            return;
        }
        
        $this->logger->log('Starting scheduled malware scan', 'info');
        
        // Scan core files
        if ($this->config->get_option('file_integrity_enabled')) {
            $this->scan_core_files();
        }
        
        // Scan themes and plugins
        $this->scan_themes_and_plugins();
        
        // Scan uploads directory
        $this->scan_uploads_directory();
        
        // Scan for backdoors
        if ($this->config->get_option('backdoor_detection_enabled')) {
            $this->scan_for_backdoors();
        }
        
        // Scan for malicious patterns
        if ($this->config->get_option('pattern_detection_enabled')) {
            $this->scan_for_malicious_patterns();
        }
        
        $this->logger->log('Completed scheduled malware scan', 'info');
    }
    
    private function scan_core_files() {
        $core_files = $this->get_core_files();
        $known_hashes = $this->get_core_file_hashes();
        
        foreach ($core_files as $file) {
            $relative_path = str_replace(ABSPATH, '', $file);
            $current_hash = hash_file('sha256', $file);
            
            if (!isset($known_hashes[$relative_path])) {
                $this->log_scan_result(array(
                    'file_path' => $relative_path,
                    'file_hash' => $current_hash,
                    'scan_type' => 'core_integrity',
                    'status' => 'unknown',
                    'details' => 'File not in known good list'
                ));
                continue;
            }
            
            if ($current_hash !== $known_hashes[$relative_path]) {
                $this->log_scan_result(array(
                    'file_path' => $relative_path,
                    'file_hash' => $current_hash,
                    'scan_type' => 'core_integrity',
                    'status' => 'modified',
                    'details' => 'File hash does not match known good hash'
                ));
                
                // Log security event
                $this->db->log_security_event(array(
                    'event_type' => 'core_file_modified',
                    'severity' => 'high',
                    'source' => 'scanner',
                    'details' => json_encode(array(
                        'file' => $relative_path,
                        'expected_hash' => $known_hashes[$relative_path],
                        'actual_hash' => $current_hash
                    ))
                ));
            }
        }
    }
    
    private function get_core_files() {
        $core_files = array();
        $wp_core_dirs = array(
            'wp-admin',
            'wp-includes',
            'wp-content'
        );
        
        foreach ($wp_core_dirs as $dir) {
            $dir_path = ABSPATH . $dir;
            if (is_dir($dir_path)) {
                $files = new RecursiveIteratorIterator(
                    new RecursiveDirectoryIterator($dir_path)
                );
                
                foreach ($files as $file) {
                    if ($file->isFile() && $file->getExtension() === 'php') {
                        $core_files[] = $file->getPathname();
                    }
                }
            }
        }
        
        return $core_files;
    }
    
    private function get_core_file_hashes() {
        // This would typically be loaded from a secure source
        // For now, we'll use a placeholder
        return get_option('securesphere_core_file_hashes', array());
    }
    
    private function scan_themes_and_plugins() {
        // Scan themes
        $themes = wp_get_themes();
        foreach ($themes as $theme) {
            $this->scan_directory($theme->get_stylesheet_directory(), 'theme');
        }
        
        // Scan plugins
        $plugins = get_plugins();
        foreach ($plugins as $plugin_file => $plugin_data) {
            $plugin_dir = WP_PLUGIN_DIR . '/' . dirname($plugin_file);
            $this->scan_directory($plugin_dir, 'plugin');
        }
    }
    
    private function scan_directory($directory, $type) {
        if (!is_dir($directory)) {
            return;
        }
        
        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator($directory)
        );
        
        foreach ($files as $file) {
            if ($file->isFile()) {
                $relative_path = str_replace(ABSPATH, '', $file->getPathname());
                
                // Skip certain file types
                if (in_array($file->getExtension(), array('jpg', 'jpeg', 'png', 'gif', 'pdf'))) {
                    continue;
                }
                
                // Check file content
                $content = file_get_contents($file->getPathname());
                
                // Check for suspicious patterns
                if ($this->contains_suspicious_patterns($content)) {
                    $this->log_scan_result(array(
                        'file_path' => $relative_path,
                        'file_hash' => hash_file('sha256', $file->getPathname()),
                        'scan_type' => $type . '_scan',
                        'status' => 'suspicious',
                        'details' => 'File contains suspicious patterns'
                    ));
                    
                    // Log security event
                    $this->db->log_security_event(array(
                        'event_type' => 'suspicious_file',
                        'severity' => 'high',
                        'source' => 'scanner',
                        'details' => json_encode(array(
                            'file' => $relative_path,
                            'type' => $type
                        ))
                    ));
                }
            }
        }
    }
    
    private function scan_uploads_directory() {
        $upload_dir = wp_upload_dir();
        $upload_path = $upload_dir['basedir'];
        
        if (is_dir($upload_path)) {
            $this->scan_directory($upload_path, 'upload');
        }
    }
    
    private function scan_for_backdoors() {
        $backdoor_patterns = array(
            'base64_decode\s*\(',
            'eval\s*\(',
            'assert\s*\(',
            'system\s*\(',
            'exec\s*\(',
            'shell_exec\s*\(',
            'passthru\s*\(',
            'popen\s*\(',
            'proc_open\s*\(',
            'pcntl_exec\s*\(',
            'chmod\s*\(\s*[\'"]777[\'"]',
            'chmod\s*\(\s*[\'"]666[\'"]',
            'file_put_contents\s*\(\s*[\'"]\.htaccess[\'"]',
            'file_put_contents\s*\(\s*[\'"]\.user\.ini[\'"]',
            'file_put_contents\s*\(\s*[\'"]wp-config\.php[\'"]',
            'file_get_contents\s*\(\s*[\'"]php://input[\'"]',
            'include\s*\(\s*[\'"]php://input[\'"]',
            'include\s*\(\s*[\'"]data://[\'"]',
            'include\s*\(\s*[\'"]expect://[\'"]',
            'include\s*\(\s*[\'"]phar://[\'"]'
        );
        
        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator(ABSPATH)
        );
        
        foreach ($files as $file) {
            if ($file->isFile() && $file->getExtension() === 'php') {
                $content = file_get_contents($file->getPathname());
                $relative_path = str_replace(ABSPATH, '', $file->getPathname());
                
                foreach ($backdoor_patterns as $pattern) {
                    if (preg_match('/' . $pattern . '/i', $content)) {
                        $this->log_scan_result(array(
                            'file_path' => $relative_path,
                            'file_hash' => hash_file('sha256', $file->getPathname()),
                            'scan_type' => 'backdoor',
                            'status' => 'malicious',
                            'details' => 'File contains backdoor pattern: ' . $pattern
                        ));
                        
                        // Log security event
                        $this->db->log_security_event(array(
                            'event_type' => 'backdoor_detected',
                            'severity' => 'critical',
                            'source' => 'scanner',
                            'details' => json_encode(array(
                                'file' => $relative_path,
                                'pattern' => $pattern
                            ))
                        ));
                        
                        // Send alert
                        $this->send_alert('Backdoor Detected', array(
                            'file' => $relative_path,
                            'pattern' => $pattern
                        ));
                    }
                }
            }
        }
    }
    
    private function scan_for_malicious_patterns() {
        $malicious_patterns = array(
            // SQL Injection patterns
            'UNION\s+SELECT',
            'UNION\s+ALL\s+SELECT',
            'INTO\s+OUTFILE',
            'INTO\s+DUMPFILE',
            'LOAD_FILE\s*\(',
            
            // XSS patterns
            '<script\b[^>]*>',
            'javascript:',
            'onerror\s*=',
            'onload\s*=',
            
            // File inclusion patterns
            'include\s*\(\s*[\'"]\.\./',
            'include\s*\(\s*[\'"]\.\.\\',
            'require\s*\(\s*[\'"]\.\./',
            'require\s*\(\s*[\'"]\.\.\\',
            
            // Command injection patterns
            '`.*`',
            '\$.*\(.*\)',
            'system\s*\(',
            'exec\s*\(',
            'shell_exec\s*\(',
            
            // WordPress specific patterns
            'wp-config\.php',
            'wp-content/plugins/.*/.*\.php',
            'wp-content/themes/.*/.*\.php'
        );
        
        $files = new RecursiveIteratorIterator(
            new RecursiveDirectoryIterator(ABSPATH)
        );
        
        foreach ($files as $file) {
            if ($file->isFile() && in_array($file->getExtension(), array('php', 'js', 'html', 'htm'))) {
                $content = file_get_contents($file->getPathname());
                $relative_path = str_replace(ABSPATH, '', $file->getPathname());
                
                foreach ($malicious_patterns as $pattern) {
                    if (preg_match('/' . $pattern . '/i', $content)) {
                        $this->log_scan_result(array(
                            'file_path' => $relative_path,
                            'file_hash' => hash_file('sha256', $file->getPathname()),
                            'scan_type' => 'malicious_pattern',
                            'status' => 'suspicious',
                            'details' => 'File contains malicious pattern: ' . $pattern
                        ));
                        
                        // Log security event
                        $this->db->log_security_event(array(
                            'event_type' => 'malicious_pattern',
                            'severity' => 'high',
                            'source' => 'scanner',
                            'details' => json_encode(array(
                                'file' => $relative_path,
                                'pattern' => $pattern
                            ))
                        ));
                    }
                }
            }
        }
    }
    
    private function contains_suspicious_patterns($content) {
        $suspicious_patterns = array(
            'eval\s*\(',
            'base64_decode\s*\(',
            'system\s*\(',
            'exec\s*\(',
            'shell_exec\s*\(',
            'passthru\s*\(',
            'popen\s*\(',
            'proc_open\s*\(',
            'pcntl_exec\s*\(',
            'chmod\s*\(\s*[\'"]777[\'"]',
            'chmod\s*\(\s*[\'"]666[\'"]'
        );
        
        foreach ($suspicious_patterns as $pattern) {
            if (preg_match('/' . $pattern . '/i', $content)) {
                return true;
            }
        }
        
        return false;
    }
    
    public function handle_manual_scan() {
        if (!current_user_can('manage_options')) {
            wp_die('Unauthorized access');
        }
        
        check_admin_referer('securesphere_run_scan');
        
        $this->run_scheduled_scan();
        
        wp_redirect(admin_url('admin.php?page=securesphere&scan_complete=1'));
        exit;
    }
    
    public function restrict_upload_types($mimes) {
        if (!$this->config->get_option('restrict_upload_types')) {
            return $mimes;
        }
        
        $allowed_types = $this->config->get_option('allowed_upload_types', array(
            'jpg|jpeg|jpe' => 'image/jpeg',
            'png' => 'image/png',
            'gif' => 'image/gif',
            'pdf' => 'application/pdf',
            'doc|docx' => 'application/msword',
            'xls|xlsx' => 'application/vnd.ms-excel',
            'ppt|pptx' => 'application/vnd.ms-powerpoint',
            'zip' => 'application/zip'
        ));
        
        return $allowed_types;
    }
    
    public function scan_uploaded_file($file) {
        if (!$this->config->get_option('scan_uploads')) {
            return $file;
        }
        
        $file_path = $file['file'];
        $file_type = $file['type'];
        
        // Skip scanning for certain file types
        if (in_array($file_type, array('image/jpeg', 'image/png', 'image/gif'))) {
            return $file;
        }
        
        // Check file content
        $content = file_get_contents($file_path);
        
        if ($this->contains_suspicious_patterns($content)) {
            // Log the suspicious file
            $this->log_scan_result(array(
                'file_path' => str_replace(ABSPATH, '', $file_path),
                'file_hash' => hash_file('sha256', $file_path),
                'scan_type' => 'upload',
                'status' => 'suspicious',
                'details' => 'Uploaded file contains suspicious patterns'
            ));
            
            // Log security event
            $this->db->log_security_event(array(
                'event_type' => 'suspicious_upload',
                'severity' => 'high',
                'source' => 'scanner',
                'details' => json_encode(array(
                    'file' => $file_path,
                    'type' => $file_type
                ))
            ));
            
            // Send alert
            $this->send_alert('Suspicious File Upload', array(
                'file' => $file_path,
                'type' => $file_type
            ));
            
            // Remove the file
            unlink($file_path);
            
            // Return error
            return new WP_Error('suspicious_file', 'The uploaded file contains suspicious patterns and has been removed.');
        }
        
        return $file;
    }
    
    private function log_scan_result($data) {
        $this->db->log_scan_result($data);
    }
    
    private function send_alert($title, $data) {
        // Send email alert
        if ($this->config->get_option('email_notifications_enabled')) {
            $to = $this->config->get_option('alert_email');
            $subject = 'SecureSphere Alert: ' . $title;
            $message = "A security alert has been triggered:\n\n";
            $message .= "Title: {$title}\n";
            $message .= "Time: " . current_time('mysql') . "\n";
            $message .= "Details:\n" . print_r($data, true);
            
            wp_mail($to, $subject, $message);
        }
        
        // Send SMS alert
        if ($this->config->get_option('sms_notifications_enabled')) {
            // Implement SMS notification logic here
        }
    }
} 